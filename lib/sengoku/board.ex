defmodule Sengoku.Board do
  @moduledoc """
  Holds any and all board-specific data on the server.
  """

  defstruct [:players_count, :regions, :tiles, :name]

  alias Sengoku.{Region, Tile}

  @doc """
  Returns a Board struct with the data specific to a given board.
  """
  def new("japan") do
    %__MODULE__{
      name: "japan",
      players_count: 4,
      regions: %{
        1 => %Region{value: 2, tile_ids: [1, 2, 3, 4]},
        2 => %Region{value: 2, tile_ids: [5, 6, 7]},
        3 => %Region{value: 5, tile_ids: [8, 9, 10, 11, 12, 13]},
        4 => %Region{value: 5, tile_ids: [14, 15, 16, 17, 18]},
        5 => %Region{value: 3, tile_ids: [19, 20, 21]},
        6 => %Region{value: 2, tile_ids: [22, 23, 24]}
      },
      tiles: %{
        1 => Tile.new([2]),
        2 => Tile.new([1, 3, 4, 5]),
        3 => Tile.new([2, 4]),
        4 => Tile.new([2, 3, 5, 8]),
        5 => Tile.new([2, 4, 6, 7, 8]),
        6 => Tile.new([5, 7]),
        7 => Tile.new([5, 6, 8, 10, 11]),
        8 => Tile.new([4, 5, 7, 9, 10]),
        9 => Tile.new([8, 10]),
        10 => Tile.new([7, 8, 9, 12, 13]),
        11 => Tile.new([7, 12]),
        12 => Tile.new([10, 11, 13, 14, 15, 16]),
        13 => Tile.new([10, 12, 14]),
        14 => Tile.new([12, 13, 16, 17]),
        15 => Tile.new([12, 16]),
        16 => Tile.new([12, 14, 15, 17, 18]),
        17 => Tile.new([14, 16, 18, 20, 21, 23]),
        18 => Tile.new([16, 17, 19, 20]),
        19 => Tile.new([18, 20]),
        20 => Tile.new([17, 18, 19, 21, 22]),
        21 => Tile.new([17, 20, 22, 23]),
        22 => Tile.new([20, 21, 23]),
        23 => Tile.new([17, 21, 22, 24]),
        24 => Tile.new([23])
      }
    }
  end

  def new("earth") do
    %__MODULE__{
      name: "earth",
      players_count: 6,
      regions: %{
        # North America
        1 => %Region{value: 5, tile_ids: Enum.to_list(1..9)},
        # South America
        2 => %Region{value: 2, tile_ids: Enum.to_list(10..13)},
        # Africa
        3 => %Region{value: 3, tile_ids: Enum.to_list(14..19)},
        # Europe
        4 => %Region{value: 5, tile_ids: Enum.to_list(20..26)},
        # Asia
        5 => %Region{value: 7, tile_ids: Enum.to_list(27..38)},
        # Australia
        6 => %Region{value: 2, tile_ids: Enum.to_list(39..42)}
      },
      tiles: %{
        1 => Tile.new([2, 4, 30]),
        2 => Tile.new([1, 3, 4, 5]),
        3 => Tile.new([2, 5, 6, 24]),
        4 => Tile.new([1, 2, 5, 7]),
        5 => Tile.new([2, 3, 4, 6, 7, 8]),
        6 => Tile.new([3, 5, 8]),
        7 => Tile.new([4, 5, 8, 9]),
        8 => Tile.new([5, 6, 7, 9]),
        9 => Tile.new([7, 8, 10]),
        10 => Tile.new([9, 11, 12]),
        11 => Tile.new([10, 12, 13]),
        12 => Tile.new([10, 11, 13, 18]),
        13 => Tile.new([11, 12]),
        14 => Tile.new([15, 16, 17]),
        15 => Tile.new([14, 17]),
        16 => Tile.new([14, 17, 18]),
        17 => Tile.new([14, 15, 16, 18, 19, 36]),
        18 => Tile.new([12, 16, 17, 19, 20, 21]),
        19 => Tile.new([17, 18, 21, 36]),
        20 => Tile.new([18, 21, 22, 23]),
        21 => Tile.new([18, 19, 20, 23, 26, 36]),
        22 => Tile.new([20, 23, 24, 25]),
        23 => Tile.new([20, 21, 22, 25, 26]),
        24 => Tile.new([3, 22, 25]),
        25 => Tile.new([22, 23, 24, 26]),
        26 => Tile.new([21, 23, 25, 27, 34, 36]),
        27 => Tile.new([26, 28, 34, 35]),
        28 => Tile.new([27, 29, 31, 32, 35]),
        29 => Tile.new([28, 30, 31]),
        30 => Tile.new([1, 29, 31, 32, 33]),
        31 => Tile.new([28, 29, 30, 32]),
        32 => Tile.new([28, 30, 31, 33, 35]),
        33 => Tile.new([30, 32]),
        34 => Tile.new([26, 27, 35, 36, 37]),
        35 => Tile.new([27, 28, 32, 33, 34, 37, 38]),
        36 => Tile.new([17, 19, 21, 26, 34, 37]),
        37 => Tile.new([34, 35, 36, 38]),
        38 => Tile.new([35, 37, 39]),
        39 => Tile.new([38, 40, 41]),
        40 => Tile.new([39, 41, 42]),
        41 => Tile.new([39, 42]),
        42 => Tile.new([40, 41])
      }
    }
  end

  @doc """
  Returns a Board struct with the data specific to a given board.
  """
  def new("wheel") do
    %__MODULE__{
      name: "wheel",
      players_count: 6,
      regions: %{
        1 => %Region{value: 3, tile_ids: [1, 6, 7, 10, 11, 14]},
        2 => %Region{value: 3, tile_ids: [2, 3, 4, 5, 8, 12]},
        3 => %Region{value: 3, tile_ids: [9, 13, 17, 24, 25, 26]},
        4 => %Region{value: 3, tile_ids: [30, 33, 34, 37, 38, 43]},
        5 => %Region{value: 3, tile_ids: [32, 36, 39, 40, 41, 42]},
        6 => %Region{value: 3, tile_ids: [18, 19, 20, 27, 31, 35]},
        7 => %Region{value: 6, tile_ids: [15, 16, 21, 22, 23, 28, 29]}
      },
      tiles: %{
        1 => Tile.new([2, 6, 7]),
        2 => Tile.new([1, 3, 7]),
        3 => Tile.new([2, 4]),
        4 => Tile.new([3, 5, 8]),
        5 => Tile.new([4, 8, 9]),
        6 => Tile.new([1, 7, 10]),
        7 => Tile.new([1, 2, 6, 11]),
        8 => Tile.new([4, 5, 9, 12]),
        9 => Tile.new([5, 8, 13]),
        10 => Tile.new([6, 14]),
        11 => Tile.new([7, 15]),
        12 => Tile.new([8, 16]),
        13 => Tile.new([9, 17]),
        14 => Tile.new([10, 18, 19]),
        15 => Tile.new([11, 16, 21, 22]),
        16 => Tile.new([12, 15, 22, 23]),
        17 => Tile.new([13, 25, 26]),
        18 => Tile.new([14, 19, 27]),
        19 => Tile.new([14, 18, 20, 27]),
        20 => Tile.new([19, 21]),
        21 => Tile.new([15, 20, 22, 28]),
        22 => Tile.new([15, 16, 21, 23, 28, 29]),
        23 => Tile.new([16, 22, 24, 29]),
        24 => Tile.new([23, 25]),
        25 => Tile.new([17, 24, 26, 30]),
        26 => Tile.new([17, 25, 30]),
        27 => Tile.new([18, 19, 31]),
        28 => Tile.new([21, 22, 29, 32]),
        29 => Tile.new([22, 23, 28, 33]),
        30 => Tile.new([25, 26, 34]),
        31 => Tile.new([27, 35]),
        32 => Tile.new([28, 36]),
        33 => Tile.new([29, 37]),
        34 => Tile.new([30, 38]),
        35 => Tile.new([31, 36, 39]),
        36 => Tile.new([32, 35, 39, 40]),
        37 => Tile.new([33, 38, 42, 43]),
        38 => Tile.new([34, 37, 43]),
        39 => Tile.new([35, 36, 40]),
        40 => Tile.new([36, 39, 41]),
        41 => Tile.new([40, 42]),
        42 => Tile.new([37, 41, 43]),
        43 => Tile.new([37, 38, 42])
      }
    }
  end

  @doc """
  Returns a Board struct with the data specific to a given board.
  """
  def new("all") do
    %__MODULE__{
      name: "all",
      players_count: 6,
      regions: %{},
      tiles: %{
        1 => Tile.new([2, 12, 13]),
        2 => Tile.new([1, 3, 13, 14]),
        3 => Tile.new([2, 4, 14, 15]),
        4 => Tile.new([3, 5, 15, 16]),
        5 => Tile.new([4, 6, 16, 17]),
        6 => Tile.new([5, 7, 17, 18]),
        7 => Tile.new([6, 8, 18, 19]),
        8 => Tile.new([7, 9, 19, 20]),
        9 => Tile.new([8, 10, 20, 21]),
        10 => Tile.new([9, 11, 21, 22]),
        11 => Tile.new([10, 22, 23]),
        12 => Tile.new([1, 13, 24]),
        13 => Tile.new([1, 2, 12, 14, 24, 25]),
        14 => Tile.new([2, 3, 13, 15, 25, 26]),
        15 => Tile.new([3, 4, 14, 16, 26, 27]),
        16 => Tile.new([4, 5, 15, 17, 27, 28]),
        17 => Tile.new([5, 6, 16, 18, 28, 29]),
        18 => Tile.new([6, 7, 17, 19, 29, 30]),
        19 => Tile.new([7, 8, 18, 20, 30, 31]),
        20 => Tile.new([8, 9, 19, 21, 31, 32]),
        21 => Tile.new([9, 10, 20, 22, 32, 33]),
        22 => Tile.new([10, 11, 21, 23, 33, 34]),
        23 => Tile.new([11, 22, 34]),
        24 => Tile.new([12, 13, 25, 35, 36]),
        25 => Tile.new([13, 14, 24, 26, 36, 37]),
        26 => Tile.new([14, 15, 25, 27, 37, 38]),
        27 => Tile.new([15, 16, 26, 28, 38, 39]),
        28 => Tile.new([16, 17, 27, 29, 39, 40]),
        29 => Tile.new([17, 18, 28, 30, 40, 41]),
        30 => Tile.new([18, 19, 29, 31, 41, 42]),
        31 => Tile.new([19, 20, 30, 32, 42, 43]),
        32 => Tile.new([20, 21, 31, 33, 43, 44]),
        33 => Tile.new([21, 22, 32, 34, 44, 45]),
        34 => Tile.new([22, 23, 33, 45, 46]),
        35 => Tile.new([24, 36, 47]),
        36 => Tile.new([24, 25, 35, 37, 47, 48]),
        37 => Tile.new([25, 26, 36, 38, 48, 49]),
        38 => Tile.new([26, 27, 37, 39, 49, 50]),
        39 => Tile.new([27, 28, 38, 40, 50, 51]),
        40 => Tile.new([28, 29, 39, 41, 51, 52]),
        41 => Tile.new([29, 30, 40, 42, 52, 53]),
        42 => Tile.new([30, 31, 41, 43, 53, 54]),
        43 => Tile.new([31, 32, 42, 44, 54, 55]),
        44 => Tile.new([32, 33, 43, 45, 55, 56]),
        45 => Tile.new([33, 34, 44, 46, 56, 57]),
        46 => Tile.new([34, 45, 57]),
        47 => Tile.new([35, 36, 48, 58, 59]),
        48 => Tile.new([36, 37, 47, 49, 59, 60]),
        49 => Tile.new([37, 38, 48, 50, 60, 61]),
        50 => Tile.new([38, 39, 49, 51, 61, 62]),
        51 => Tile.new([39, 40, 50, 52, 62, 63]),
        52 => Tile.new([40, 41, 51, 53, 63, 64]),
        53 => Tile.new([41, 42, 52, 54, 64, 65]),
        54 => Tile.new([42, 43, 53, 55, 65, 66]),
        55 => Tile.new([43, 44, 54, 56, 66, 67]),
        56 => Tile.new([44, 45, 55, 57, 67, 68]),
        57 => Tile.new([45, 46, 56, 68, 69]),
        58 => Tile.new([47, 59, 70]),
        59 => Tile.new([47, 48, 58, 60, 70, 71]),
        60 => Tile.new([48, 49, 59, 61, 71, 72]),
        61 => Tile.new([49, 50, 60, 62, 72, 73]),
        62 => Tile.new([50, 51, 61, 63, 73, 74]),
        63 => Tile.new([51, 52, 62, 64, 74, 75]),
        64 => Tile.new([52, 53, 63, 65, 75, 76]),
        65 => Tile.new([53, 54, 64, 66, 76, 77]),
        66 => Tile.new([54, 55, 65, 67, 77, 78]),
        67 => Tile.new([55, 56, 66, 68, 78, 79]),
        68 => Tile.new([56, 57, 67, 69, 79, 80]),
        69 => Tile.new([57, 68, 80]),
        70 => Tile.new([58, 59, 71, 81, 82]),
        71 => Tile.new([59, 60, 70, 72, 82, 83]),
        72 => Tile.new([60, 61, 71, 73, 83, 84]),
        73 => Tile.new([61, 62, 72, 74, 84, 85]),
        74 => Tile.new([62, 63, 73, 75, 85, 86]),
        75 => Tile.new([63, 64, 74, 76, 86, 87]),
        76 => Tile.new([64, 65, 75, 77, 87, 88]),
        77 => Tile.new([65, 66, 76, 78, 88, 89]),
        78 => Tile.new([66, 67, 77, 79, 89, 90]),
        79 => Tile.new([67, 68, 78, 80, 90, 91]),
        80 => Tile.new([68, 69, 79, 91, 92]),
        81 => Tile.new([70, 82, 93]),
        82 => Tile.new([70, 71, 81, 83, 93, 94]),
        83 => Tile.new([71, 72, 82, 84, 94, 95]),
        84 => Tile.new([72, 73, 83, 85, 95, 96]),
        85 => Tile.new([73, 74, 84, 86, 96, 97]),
        86 => Tile.new([74, 75, 85, 87, 97, 98]),
        87 => Tile.new([75, 76, 86, 88, 98, 99]),
        88 => Tile.new([76, 77, 87, 89, 99, 100]),
        89 => Tile.new([77, 78, 88, 90, 100, 101]),
        90 => Tile.new([78, 79, 89, 91, 101, 102]),
        91 => Tile.new([79, 80, 90, 92, 102, 103]),
        92 => Tile.new([80, 91, 103]),
        93 => Tile.new([81, 82, 94, 104, 105]),
        94 => Tile.new([82, 83, 93, 95, 105, 106]),
        95 => Tile.new([83, 84, 94, 96, 106, 107]),
        96 => Tile.new([84, 85, 95, 97, 107, 108]),
        97 => Tile.new([85, 86, 96, 98, 108, 109]),
        98 => Tile.new([86, 87, 97, 99, 109, 110]),
        99 => Tile.new([87, 88, 98, 100, 110, 111]),
        100 => Tile.new([88, 89, 99, 101, 111, 112]),
        101 => Tile.new([89, 90, 100, 102, 112, 113]),
        102 => Tile.new([90, 91, 101, 103, 113, 114]),
        103 => Tile.new([91, 92, 102, 114, 115]),
        104 => Tile.new([93, 105, 116]),
        105 => Tile.new([93, 94, 104, 106, 116, 117]),
        106 => Tile.new([94, 95, 105, 107, 117, 118]),
        107 => Tile.new([95, 96, 106, 108, 118, 119]),
        108 => Tile.new([96, 97, 107, 109, 119, 120]),
        109 => Tile.new([97, 98, 108, 110, 120, 121]),
        110 => Tile.new([98, 99, 109, 111, 121, 122]),
        111 => Tile.new([99, 100, 110, 112, 122, 123]),
        112 => Tile.new([100, 101, 111, 113, 123, 124]),
        113 => Tile.new([101, 102, 112, 114, 124, 125]),
        114 => Tile.new([102, 103, 113, 115, 125, 126]),
        115 => Tile.new([103, 114, 126]),
        116 => Tile.new([104, 105, 117]),
        117 => Tile.new([105, 106, 116, 118]),
        118 => Tile.new([106, 107, 117, 119]),
        119 => Tile.new([107, 108, 118, 120]),
        120 => Tile.new([108, 109, 119, 121]),
        121 => Tile.new([109, 110, 120, 122]),
        122 => Tile.new([110, 111, 121, 123]),
        123 => Tile.new([111, 112, 122, 124]),
        124 => Tile.new([112, 113, 123, 125]),
        125 => Tile.new([113, 114, 124, 126]),
        126 => Tile.new([114, 115, 125])
      }
    }
  end
end
